import base64


def twos_comp(val, bits):
    """compute the 2's complement of int value val"""
    if (val & (1 << (bits - 1))) != 0: # if sign bit is set e.g., 8bit: 128-255
        val = val - (1 << bits)        # compute negative value
    return val                         # return positive value as is


cipher = [0xFFFFFFD9, 0xFFFFFFB2, 0xFFFFFFB9, 0xFFFFFFF4, 0xFFFFFFE3, 0xFFFFFFC7, 0xFFFFFFDA, 0xFFFFFFEC, 0xFFFFFFE3, 0xFFFFFFB3, 0xFFFFFFD1, 0xFFFFFFD2, 0xFFFFFFC5, 0xFFFFFFB1, 0xFFFFFFF4, 0xFFFFFFD9, 0xFFFFFFD4, 0xFFFFFFB1, 0xFFFFFFC9, 0xFFFFFFD4, 0xFFFFFFC5, 0xFFFFFFEE, 0xFFFFFFB9, 0xFFFFFFC3, 0xFFFFFFD1, 0xFFFFFFD6, 0xFFFFFFCE, 0xFFFFFFC6, 0xFFFFFFC6, 0xFFFFFFE8, 0xFFFFFFD2, 0xFFFFFFAF, 0xFFFFFFD5, 0xFFFFFFB0, 0xFFFFFFE8, 0xFFFFFFCA, 0xFFFFFFD2, 0xFFFFFFEC, 0xFFFFFFD1, 0xFFFFFFD2, 0xFFFFFFC5, 0xFFFFFFE8, 0xFFFFFFE8, 0xFFFFFFE4]

cipher1= []
# print twos_comp(0xffffff0d,32)
for i in cipher:
	cipher1.append(twos_comp(i,32)+128)

temp = ''
for i in cipher1:
	temp+=chr(i)

temp = base64.b64decode(temp)
# print (temp)
flag = ''
for i in temp:
	# print (i)
	# print (ord(i))
	flag += chr(i^32)

print (flag)

# compfest[XORBASESHIFTâ–’]