from sage.all import *

rev=lambda x: "".join([x[i]+x[i+1]for i in range(len(x)-2,-1,-2)])
stoi= lambda x: ord(x)

data =rev("4030735159026253")
data+=rev("6a4e0929556a1506")
data+=rev("726d79125b612c76")
data+=rev("6e343f2f1e")
check = [int(data[i]+data[i+1],16) for i in range(0,len(data),2)]

tbl=[0x5b,0x43,0x6d,0x67,0x1c,0x38,0x10,0x33,0x14,0x52,0x33,0x7a,0x27,0x1b,0x3d,0x3d,0x40,0x6a,0x0f,0x01,0x68,0x60,0x0c,0x6e,0x5c,0x19,0x58,0x3d,0x46,0x5c,0x79,0x67,0x6f,0x5e,0x51,0x49,0x65,0x6b,0x7d,0x18,0x6b,0x7c,0x78,0x58,0x74,0x4b,0x27,0x27,0x50,0x1d,0x58,0x2e,0x6f,0x45,0x10,0x07,0x3a,0x5a,0x1c,0x7d,0x20,0x53,0x64,0x4b,0x31,0x20,0x46,0x74,0x38,0x5a,0x09,0x0d,0x59,0x38,0x11,0x24,0x18,0x46,0x15,0x1b,0x44,0x66,0x5a,0x15,0x1e,0x66,0x39,0x5c,0x6d,0x1a,0x0c,0x29,0x5c,0x4b,0x31,0x71,0x10,0x5b,0x01,0x7b,0x16,0x61,0x06,0x09,0x0b,0x1b,0x7e,0x42,0x2b,0x10,0x1e,0x55,0x5e,0x62,0x02,0x74,0x2a,0x0b,0x15,0x75,0x79,0x1c,0x59,0x5d,0x18,0x79,0x40,0x05,0x2e,0x29,0x1b,0x03,0x3c,0x02,0x23,0x41,0x2f,0x2e,0x06,0x09,0x77,0x65,0x3e,0x2c,0x6e,0x6d,0x43,0x07,0x09,0x76,0x04,0x2d,0x53,0x43,0x35,0x6f,0x54,0x10,0x1c,0x62,0x00,0x3e,0x12,0x2d,0x68,0x5e,0x05,0x57,0x49,0x59,0x57,0x40,0x62,0x10,0x62,0x14,0x78,0x59,0x61,0x62,0x6e,0x02,0x7c,0x30,0x4c,0x4c,0x49,0x18,0x04,0x1b,0x51,0x4b,0x1c,0x4e,0x19,0x4e,0x2e,0x2d,0x42,0x03,0x10,0x46,0x33,0x46,0x4c,0x07,0x41,0x06,0x38,0x6a,0x13,0x46,0x71,0x12,0x18,0x26,0x3f,0x42,0x5d,0x47,0x39,0x11,0x11,0x58,0x3a,0x7d,0x22,0x35,0x5e,0x45,0x34,0x48,0x59,0x37,0x68,0x7a,0x49,0x78,0x28,0x39,0x52,0x48,0x56,0x0b,0x1c,0x4c,0x75,0x7a,0x17,0x17,0x0b,0x47,0x3d,0x6f,0x3c,0x3a,0x20,0x31,0x51,0x43,0x18,0x64,0x20,0x27,0x6e,0x7a,0x11,0x4c,0x18,0x69,0x67,0x4f,0x6c,0x31,0x2b,0x23,0x39,0x71,0x49,0x75,0x66,0x6c,0x51,0x3a,0x62,0x3c,0x5a,0x68,0x14,0x42,0x72,0x27,0x0e,0x24,0x71,0x4b,0x72,0x25,0x20,0x0a,0x5a,0x34,0x37,0x70,0x48,0x2b,0x30,0x08,0x74,0x60,0x65,0x47,0x65,0x05,0x51,0x74,0x65,0x2f,0x43,0x6e,0x04,0x76,0x1f,0x5c,0x26,0x43,0x0f,0x6e,0x53,0x29,0x40,0x66,0x35,0x23,0x04,0x42,0x05,0x1b,0x23,0x65,0x55,0x09,0x1a,0x00,0x31,0x6a,0x15,0x22,0x18,0x78,0x65,0x64,0x49,0x3e,0x53,0x4f,0x47,0x49,0x0f,0x18,0x55,0x2c,0x21,0x49,0x01,0x17,0x2f,0x6e,0x63,0x7b,0x5b,0x3b,0x32,0x02,0x6a,0x13,0x66,0x26,0x3b,0x18,0x24,0x39,0x2c,0x3f,0x66,0x74,0x63,0x26,0x1a,0x10,0x08,0x43,0x71,0x38,0x6d,0x29,0x1e,0x2d,0x41,0x56,0x38,0x40,0x4a,0x37,0x5f,0x57,0x29,0x49,0x41,0x74,0x4a,0x1b,0x09,0x69,0x59,0x3a,0x02,0x1b,0x09,0x6b,0x71,0x4c,0x55,0x3c,0x5b,0x6a,0x7b,0x32,0x74,0x52,0x0e,0x33,0x0f,0x18,0x7e,0x5a,0x4d,0x20,0x55,0x4a,0x34,0x0e,0x7a,0x66,0x42,0x3b,0x5e,0x68,0x5f,0x4a,0x28,0x16,0x38,0x04,0x55,0x54,0x1a,0x05,0x1b,0x52,0x02,0x40,0x79,0x56,0x6d,0x23,0x07,0x73,0x01,0x67,0x58,0x51,0x0f,0x54,0x23,0x2d,0x11,0x48,0x15,0x4e,0x55,0x3f,0x3c,0x24,0x28,0x10,0x2a,0x4e,0x26,0x38,0x2f,0x0c,0x4e,0x74,0x5b,0x6c,0x2a,0x61,0x06,0x0c,0x12,0x42,0x23,0x04,0x63,0x38,0x3b,0x55,0x1f,0x67,0x26,0x38,0x4f,0x01,0x26,0x29,0x2b,0x4a,0x1c,0x0e,0x2f,0x7b,0x30,0x26,0x3d,0x6b,0x03,0x3f,0x6c,0x28,0x7c,0x62,0x6c,0x44,0x66,0x2b,0x54,0x50,0x0f,0x6c,0x38,0x45,0x6a,0x41,0x41,0x0b,0x73,0x78,0x60,0x2f,0x12,0x40,0x53,0x15,0x08,0x1c,0x1d,0x2b,0x00,0x5e,0x30,0x49,0x3e,0x64,0x0b,0x19,0x72,0x01,0x11,0x79,0x29,0x0a,0x17,0x02,0x06,0x4c,0x29,0x58,0x23,0x55,0x32,0x38,0x7e,0x65,0x05,0x26,0x37,0x5b,0x13,0x07,0x16,0x05,0x0d,0x0a,0x6d,0x59,0x73,0x71,0x64,0x74,0x48,0x42,0x57,0x48,0x20,0x25,0x73,0x30,0x1b,0x22,0x23,0x0b,0x70,0x3e,0x4c,0x31,0x7d,0x41,0x36,0x46,0x58,0x7c,0x2c,0x04,0x0a,0x71,0x03,0x34,0x3b,0x4a,0x1a,0x47,0x10,0x3a,0x67,0x1f,0x51,0x6f,0x44,0x70,0x73,0x32,0x6b,0x22,0x13,0x64,0x77,0x72,0x06,0x17,0x66,0x31,0x38,0x2f,0x0e,0x54,0x50,0x61,0x7e,0x74,0x74,0x25,0x0b,0x48,0x7c,0x5f,0x0c,0x25,0x3f,0x75,0x51,0x11,0x19,0x3f,0x44,0x27,0x25,0x79,0x64,0x6e,0x68,0x41,0x37,0x50,0x09,0x1a,0x4f,0x5d,0x72,0x71,0x52,0x6e,0x17,0x0c,0x25,0x5d,0x26,0x21,0x0f,0x6a,0x3e,0x2e,0x3b,0x4b,0x1a,0x0b,0x54,0x06,0x38,0x60,0x25,0x55,0x3c,0x03,0x2c,0x6d,0x77,0x5a,0x3a,0x73,0x17,0x79,0x2b,0x4a,0x54,0x33,0x69,0x46,0x62,0x77,0x0d,0x50,0x73,0x2c,0x12,0x5e,0x3a,0x5d,0x3f,0x64,0x0f,0x40,0x2e,0x64,0x59,0x6e,0x1d,0x67,0x1a,0x16,0x1c,0x0b,0x14,0x10,0x5f,0x17,0x03,0x28,0x45,0x54,0x23,0x05,0x5d,0x69,0x79,0x0c,0x72,0x05,0x1e,0x19,0x51,0x4e,0x05,0x23,0x6a,0x0f,0x35,0x5b,0x7b,0x23,0x5c,0x19,0x2f,0x51,0x53,0x7a,0x75,0x58,0x18,0x5b,0x3a,0x02,0x42,0x53,0x15,0x42,0x1b,0x00,0x1f,0x21,0x61,0x66,0x25,0x01,0x39,0x63,0x4d,0x01,0x75,0x51,0x4a,0x5f,0x08,0x4b,0x12,0x56,0x08,0x0f,0x3e,0x11,0x40,0x68,0x08,0x7c,0x19,0x0e,0x4f,0x21,0x1e,0x7d,0x12,0x3a,0x4b,0x5a,0x51,0x65,0x18,0x7e,0x1b,0x7b,0x66,0x48,0x6f,0x6f,0x72,0x61,0x79,0x20,0x3a,0x29,0x0a,0x4e,0x6f,0x74,0x20,0x48,0x6f,0x6f,0x72,0x61,0x79,0x20,0x3a,0x28,0x0a,0x4e,0x6f,0x74,0x20,0x74,0x68,0x65,0x20,0x63,0x6f,0x72,0x72,0x65,0x63,0x74,0x20,0x6c,0x65,0x6e,0x67,0x74,0x68,0x0a,0x53,0x62,0x02,0x59,0x51,0x73,0x30,0x40,0x06,0x15,0x6a,0x55,0x29,0x09,0x4e,0x6a,0x76,0x2c,0x61,0x5b,0x12,0x79,0x6d,0x72,0x1e,0x2f,0x3f,0x34,0x6e]
print (check)
# print (tbl)
#tbl dr hsl export byte_804A100
 
# assert(len(tbl) == 841)
# tbl = list(map(ord, tbl))
 
#check dr hsl export byte_804A478
 
# assert(len(check) == 29)
# check = list(map(ord, check))
 
ff127 = Zmod(127)
print (ff127)
tbl_matrix = matrix(ff127, [[tbl[29 * v10 + i] for v10 in range(29)] for i in range(29)])#.transpose()
print(tbl_matrix)
print('#'*50)
check_matrix = matrix(ff127, check)
print(check_matrix)
 
flag = tbl_matrix.solve_left(check_matrix)
print(''.join([chr(c) for c in flag[0]]))